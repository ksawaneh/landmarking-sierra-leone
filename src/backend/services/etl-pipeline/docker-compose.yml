version: '3.8'

services:
  etl-pipeline:
    build: .
    container_name: landmarking-etl
    restart: unless-stopped
    ports:
      - "${METRICS_PORT:-9090}:9090"  # Metrics port
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MLHCP_CONNECTION_STRING=${MLHCP_CONNECTION_STRING}
      - MLHCP_API_KEY=${MLHCP_API_KEY}
      - NRA_API_URL=${NRA_API_URL}
      - NRA_API_KEY=${NRA_API_KEY}
      - OARG_CONNECTION_STRING=${OARG_CONNECTION_STRING}
      - GEOCODING_API_KEY=${GEOCODING_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - ALERT_EMAIL=${ALERT_EMAIL}
      - ALERT_SMS=${ALERT_SMS}
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    depends_on:
      - postgres
      - redis
      - elasticsearch
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    networks:
      - landmarking-network
    env_file:
      - .env

  postgres:
    image: postgis/postgis:14-3.2-alpine
    container_name: landmarking-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-landmarking}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - landmarking-network

  redis:
    image: redis:7-alpine
    container_name: landmarking-redis-etl
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - landmarking-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: landmarking-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - landmarking-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: landmarking-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - landmarking-network

  grafana:
    image: grafana/grafana:latest
    container_name: landmarking-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - landmarking-network

volumes:
  postgres-data:
  redis-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  landmarking-network:
    driver: bridge